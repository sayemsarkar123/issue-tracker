{"version":3,"sources":["components/Issue/Issue.js","components/Issues/Issues.js","components/Main/Main.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Issue","issue","id","status","description","severity","assignedTo","dispatch","style","backgroundColor","className","icon","faClock","faUser","onClick","type","payload","Issues","state","issues","map","Main","useForm","register","handleSubmit","errors","console","log","onSubmit","data","issueDescription","issueSeverity","Math","random","placeholder","name","ref","required","value","message","initialState","reducer","find","filter","Home","useReducer","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3164c7db.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser, faClock } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Issue = ({issue: { id, status, description, severity, assignedTo }, dispatch}) => {\r\n  return (\r\n    <div style={{backgroundColor: '#f5f5f5'}} className=\"col-md-11 mx-auto rounded mt-4 p-4\">\r\n      <div>\r\n        <small>Issue ID: {id}</small>\r\n        <div className=\"w-100\"></div>\r\n        <div className={`badge my-3 ${status === 'Open' ? 'badge-info' : 'badge-danger'}`}>{status}</div>\r\n        <h3 className=\"mb-2\">{description}</h3>\r\n        <p>\r\n          <span className=\"mr-1\"><FontAwesomeIcon icon={faClock} /></span> {severity}\r\n        </p>\r\n        <p className=\"my-3\">\r\n          <span className=\"mr-1\"><FontAwesomeIcon icon={faUser} /></span> {assignedTo}\r\n        </p>\r\n        <button\r\n          onClick={() => dispatch({ type: 'CLOSE_ISSUE', payload: { id } })}\r\n          className=\"btn btn-warning mr-2\"\r\n        >\r\n          Close\r\n        </button>\r\n        <button\r\n          onClick={() => dispatch({ type: 'DELETE_ISSUE', payload: { id } })}\r\n          className=\"btn btn-danger\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Issue;\r\n","import React from 'react';\r\nimport Issue from '../Issue/Issue';\r\n\r\nconst Issues = ({state, dispatch}) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        {state.issues.map((issue) => (\r\n          <Issue key={issue.id} issue={issue} dispatch={dispatch}></Issue>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Issues;\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst Main = ({dispatch}) => {\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const onSubmit = (data) => {\r\n    const { issueDescription: description, issueSeverity: severity, assignedTo } = data;\r\n    dispatch({ type: 'ADD_ISSUE', payload: { id: ~~(Math.random() * 999999999), status: 'Open', description, severity, assignedTo } });\r\n  };\r\n  console.log('ERROR', errors);\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"row\">\r\n        <div style={{backgroundColor: '#eee'}} className=\"col-md-12 p-5 rounded\">\r\n          <h3 className=\"mb-3\">Add New Issue:</h3>\r\n          <form className=\"wasValidated\" onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"form-group\">\r\n              <label className=\"font-weight-bold\">Description</label>\r\n              <input\r\n                className={`form-control ${\r\n                  errors.issueDescription ? 'is-invalid' : ''\r\n                }`}\r\n                placeholder=\"Describe the issue ...\"\r\n                type=\"text\"\r\n                name=\"issueDescription\"\r\n                ref={register({\r\n                  required: {\r\n                    value: true,\r\n                    message: 'This field cannot be empty.',\r\n                  },\r\n                })}\r\n              />\r\n              <div className=\"invalid-feedback\">\r\n                {errors.issueDescription?.message}\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group my-3\">\r\n              <label className=\"font-weight-bold\">Severity</label>\r\n              <select\r\n                className={`form-control ${\r\n                  errors.issueSeverity ? 'is-invalid' : ''\r\n                }`}\r\n                name=\"issueSeverity\"\r\n                ref={register({\r\n                  required: {\r\n                    value: true,\r\n                    message: 'This field cannot be empty.',\r\n                  },\r\n                })}\r\n              >\r\n                <option value=\"Low\">Low</option>\r\n                <option value=\"Medium\">Medium</option>\r\n                <option value=\"High\">High</option>\r\n              </select>\r\n              <div className=\"invalid-feedback\">\r\n                {errors.issueSeverity?.message}\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"font-weight-bold\">Assigned To</label>\r\n              <input\r\n                className={`form-control ${\r\n                  errors.assignedTo ? 'is-invalid' : ''\r\n                }`}\r\n                placeholder=\"Enter responsible ...\"\r\n                type=\"text\"\r\n                name=\"assignedTo\"\r\n                ref={register({\r\n                  required: {\r\n                    value: true,\r\n                    message: 'This field cannot be empty.',\r\n                  },\r\n                })}\r\n              />\r\n              <div className=\"invalid-feedback\">\r\n                {errors.assignedTo?.message}\r\n              </div>\r\n            </div>\r\n            <input\r\n              className=\"btn btn-primary rounded mt-2\"\r\n              type=\"submit\"\r\n              value=\"Add\"\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useReducer } from 'react';\r\nimport Issues from '../Issues/Issues';\r\nimport Main from '../Main/Main';\r\n\r\nconst initialState = {\r\n  issues: []\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => {\r\n  switch (type) {\r\n    case 'ADD_ISSUE':\r\n      return {\r\n        issues: [...state.issues, payload]\r\n      }\r\n    case 'CLOSE_ISSUE':\r\n      const issues = [...state.issues];\r\n      const issue = issues.find(issue => issue.id === payload.id);\r\n      issue.status = 'Closed';\r\n      return {\r\n        issues\r\n      }\r\n    case 'DELETE_ISSUE':\r\n      const remainingIssues = state.issues.filter(issue => issue.id !== payload.id);\r\n      return {\r\n        issues: remainingIssues\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Home = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <Main dispatch={dispatch}></Main>\r\n      <Issues state={state} dispatch={dispatch}></Issues>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './components/Home/Home';\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home></Home>\n        </Route>\n        <Route path=\"*\"></Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}